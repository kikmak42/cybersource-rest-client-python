# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'operator': 'str',
        'scheme_name': 'str',
        'scheme_operator': 'str'
    }

    attribute_map = {
        'name': 'name',
        'operator': 'operator',
        'scheme_name': 'schemeName',
        'scheme_operator': 'schemeOperator'
    }

    def __init__(self, name=None, operator=None, scheme_name=None, scheme_operator=None):
        """
        TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod - a model defined in Swagger
        """

        self._name = None
        self._operator = None
        self._scheme_name = None
        self._scheme_operator = None

        if name is not None:
          self.name = name
        if operator is not None:
          self.operator = operator
        if scheme_name is not None:
          self.scheme_name = scheme_name
        if scheme_operator is not None:
          self.scheme_operator = scheme_operator

    @property
    def name(self):
        """
        Gets the name of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        A Payment Type is enabled through a Method. Examples: Visa, Master Card, ApplePay, iDeal 

        :return: The name of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        A Payment Type is enabled through a Method. Examples: Visa, Master Card, ApplePay, iDeal 

        :param name: The name of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        :type: str
        """

        self._name = name

    @property
    def operator(self):
        """
        Gets the operator of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        An operator of the Payment Type Method. Examples: Visa, PayPal, Google, Apple 

        :return: The operator of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """
        Sets the operator of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        An operator of the Payment Type Method. Examples: Visa, PayPal, Google, Apple 

        :param operator: The operator of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        :type: str
        """

        self._operator = operator

    @property
    def scheme_name(self):
        """
        Gets the scheme_name of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        A Payment Scheme is a formal, commercial relationship amongst payment ecosystem players (banks and merchants, typically, extended to include merchants payment service providers, banks processors, etc.), whereby the participants agree to an organizational, legal, and operational framework necessary for the functioning of the services these entities provide. Examples: Visa, Master Card, ApplePay, iDeal 

        :return: The scheme_name of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """
        Sets the scheme_name of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        A Payment Scheme is a formal, commercial relationship amongst payment ecosystem players (banks and merchants, typically, extended to include merchants payment service providers, banks processors, etc.), whereby the participants agree to an organizational, legal, and operational framework necessary for the functioning of the services these entities provide. Examples: Visa, Master Card, ApplePay, iDeal 

        :param scheme_name: The scheme_name of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        :type: str
        """

        self._scheme_name = scheme_name

    @property
    def scheme_operator(self):
        """
        Gets the scheme_operator of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        Operator of the Scheme. Examples European Payment Council, Visa, Currence Ideal B.V 

        :return: The scheme_operator of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        :rtype: str
        """
        return self._scheme_operator

    @scheme_operator.setter
    def scheme_operator(self, scheme_operator):
        """
        Sets the scheme_operator of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        Operator of the Scheme. Examples European Payment Council, Visa, Currence Ideal B.V 

        :param scheme_operator: The scheme_operator of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod.
        :type: str
        """

        self._scheme_operator = scheme_operator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
